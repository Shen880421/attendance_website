{% extends "dashboard.inc.twig" %}
{% block menu %}
	<div class="list-group">

        <a href="admin_dashboard.php" class="list-group-item active">首頁</a>
        <a href="admin_dashboard.php?mode=inoutlist&name=Aaron&date=2025-04-15" class="list-group-item">打卡記錄列表</a>
        <a href="admin_dashboard.php?mode=adduser" class="list-group-item">創建使用者</a>
    </div>
{% endblock %}
{% block scripts %}
<script>
let myChart = null;
let myChart2 = null;

function updateChart(data) {
    const ctx = document.getElementById('courseChart').getContext('2d');
    if (myChart) {
        myChart.destroy();
    }

		<a href="admin_dashboard.php" class="list-group-item active">首頁</a>
		<a href="admin_dashboard.php?mode=inoutlist&name=Aaron" class="list-group-item">打卡記錄列表</a>
		<a href="admin_dashboard.php?mode=userlist" class="list-group-item">使用者列表</a>
	</div>
{% endblock %}
{% block scripts %}
	<script>
		let myChart = null;
function updateChart(data) {
const ctx = document.getElementById('courseChart').getContext('2d');

if (myChart) {
myChart.destroy();
}
// updataChart()是用來重製圖表的


const labels = data.map(item => item.class_name);
const totalHours = data.map(item => parseInt(item.total_class_hours));
const completionRates = data.map(item => parseFloat(item.completion_rate_pct));
const completedHours = totalHours.map((hours, i) => hours * (completionRates[i] / 100));
const remainingHours = totalHours.map((hours, i) => hours - completedHours[i]);

myChart = new Chart(ctx, {
type: 'bar',
data: {
labels: labels,
datasets: [
{
label: '已完成時數',
data: completedHours,
backgroundColor: 'rgba(54, 162, 235, 0.8)',
borderColor: 'rgba(54, 162, 235, 1)',
borderWidth: 1
}, {
label: '未完成時數',
data: remainingHours,
backgroundColor: 'rgba(201, 203, 207, 0.6)',
borderColor: 'rgba(201, 203, 207, 1)',
borderWidth: 1
}
]
},
options: {
indexAxis: 'y',
responsive: true,
scales: {
x: {
stacked: true,
beginAtZero: true,
title: {
display: true,
text: '時數 (小時)'
}
},
y: {
stacked: true,
title: {
display: true,
text: '課程名稱'
}
}
},
interaction: {
mode: 'nearest',
axis: 'y',
intersect: false
},
plugins: {
tooltip: {
mode: 'index',
intersect: false
},
legend: {
position: 'top'
}
}
}
});
}

document.addEventListener('DOMContentLoaded', function () {

    const classhours = document.getElementById("classhours");
    const classEl = document.getElementById("class");
    const days = document.getElementById("days");
    const attendancerate = document.getElementById("attendancerate");
    const laterate = document.getElementById("laterate");
    const leave_earlyrate = document.getElementById("leave_earlyrate");
    const inschoolavrage = document.getElementById("inschoolavrage");
    const studentSelect = document.getElementById('studentSelect');

    // 初始化學生選單
    fetch('student.php')
        .then(res => res.json())
        .then(studentList => {
            studentSelect.innerHTML = '<option selected disabled>選取學生</option>';
            studentList.forEach(student => {
                const option = document.createElement('option');
                option.value = student.name;
                option.textContent = student.name;
                studentSelect.appendChild(option);
            });
        });

    // 搜尋按鈕事件
    document.getElementById('searchBtn').addEventListener('click', function () {
        const studentname = studentSelect.value;
        if (!studentname) {
            alert('請選取學生');
            return;
        }

        // 取得統計數據
        fetch('sumdataforchart.php', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({ name: studentname })
        })
        .then(res => res.json())
        .then(data => {
            if (!data || Object.keys(data).length === 0 || data.error) {
                alert('查無該學生的統計資料');
                return;
            }

            classhours.innerHTML = `${parseFloat(data.class_hours).toFixed(2)} 小時`;
            classEl.innerHTML = `${parseFloat(data.attended_hours).toFixed(2)} 小時`;
            days.innerHTML = `${data.days} 天`;

            const attendanceratenum = parseInt((parseFloat(data.attended_hours) / parseFloat(data.class_hours)) * 100);
            attendancerate.innerHTML = `${attendanceratenum}%`;

            const lateratecal = (parseFloat(data.late_hours) / parseFloat(data.class_hours)) * 100;
            laterate.innerHTML = `${lateratecal.toFixed(2)}%`;

            const leave_earlyratecal = (parseFloat(data.leave_early_hours) / parseFloat(data.class_hours)) * 100;
            leave_earlyrate.innerHTML = `${leave_earlyratecal.toFixed(2)}%`;

            const inschoolavragecal = parseFloat(parseInt(data.raw_hours) / parseInt(data.days));
            inschoolavrage.innerHTML = `${inschoolavragecal.toFixed(2)} 小時`;

            // 定義 ctx2
            const ctx2 = document.getElementById('myAttenChart').getContext('2d');

            // 顯示圓餅圖
            if (myChart2) {
                myChart2.destroy();
            }
            myChart2 = new Chart(ctx2, {
                type: 'pie',
                data: {
                    labels: ['出席', '缺席'],
                    datasets: [{
                        label: '出缺席',
                        data: [
                            parseFloat(data.attended_hours).toFixed(2),
                            parseFloat(data.absent_hours).toFixed(2)
                        ],
                        backgroundColor: [
                            'rgba(75, 192, 192, 0.6)',
                            'rgba(255, 99, 132, 0.6)'
                        ],
                        borderWidth: 0
                    }]
                }
            });
        });

        // 取得課程資料並更新長條圖
        fetch('sumclassdata.php', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({ name: studentname })
        })
        .then(res => res.json())
        .then(data => {
            updateChart(data);
        })
        .catch(err => {
            console.error('取得圖表資料錯誤:', err);
        });
    });
});

    const ctx_ct = document.getElementById('myclasstimeChart').getContext('2d');
    const ctx_at = document.getElementById('myattentimeChart').getContext('2d');
    let mylinechart1 = null;
    let mylinechart2 = null;

    async function linechart(studentname) {
        if (!studentname) {
            console.warn('請傳入學生名稱');
            return;
        }

        try {
            const response = await fetch('hoursline.php', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ name: studentname })
            });

            if (!response.ok) throw new Error('HTTP error ' + response.status);

            const res = await response.json();

            if (!Array.isArray(res) || res.length === 0) {
                console.warn('資料格式錯誤或無資料');
                return;
            }

            const classdate = res.map(item => item.class_date);
            const classhours = res.map(item => Number(item.class_hours));
            const attenhours = res.map(item => Number(item.raw_hours));

            if (mylinechart1) mylinechart1.destroy();
            if (mylinechart2) mylinechart2.destroy();

            mylinechart1 = new Chart(ctx_ct, {
                type: 'line',
                data: {
                    labels: classdate,
                    datasets: [{
                        label: '每日上課時間',
                        data: classhours,
                        backgroundColor: 'rgba(75, 192, 192, 0.6)',
                        borderColor: 'rgba(75, 192, 192, 0.6)',
                        fill: false,
                        tension: 0.1
                    }]
                },
                options: {
                    scales: {
                        y: { beginAtZero: true }
                    }
                }
            });

            mylinechart2 = new Chart(ctx_at, {
                type: 'line',
                data: {
                    labels: classdate,
                    datasets: [{
                        label: '每日在校時間',
                        data: attenhours,
                        backgroundColor: 'rgba(255, 159, 64, 0.6)',
                        borderColor: 'rgba(255, 159, 64, 0.6)',
                        fill: false,
                        tension: 0.1
                    }]
                },
                options: {
                    scales: {
                        y: { beginAtZero: true }
                    }
                }
            });

        } catch (error) {
            console.error('折線圖資料錯誤:', error);
        }
    }

    // 假設你有學生選單，載入時自動呼叫
    document.addEventListener('DOMContentLoaded', () => {
       // 不預設呼叫 linechart，等用戶選學生再呼叫
    const searchBtn = document.getElementById('searchBtn');
    const studentSelect = document.getElementById('studentSelect');

    searchBtn.addEventListener('click', () => {
        const selectedStudent = studentSelect.value;
        if (!selectedStudent) {
            alert('請先選擇學生');
            return;
        }
        linechart(selectedStudent);
    });
    });
</script>

const classhours = document.getElementById("classhours");
const classEl = document.getElementById("class");
const days = document.getElementById("days");
const attendancerate = document.getElementById("attendancerate");
const laterate = document.getElementById("laterate");
const leave_earlyrate = document.getElementById("leave_earlyrate");
const inschoolavrage = document.getElementById("inschoolavrage");

// 先抓學生選擇器的預設值（第一次載入時選定第一位）
const studentSelect = document.getElementById('studentSelect');

// ✅ 初始化選單
fetch('student.php').then(res => res.json()).then(studentList => {
studentSelect.innerHTML = '<option selected disabled>選取學生</option>';
studentList.forEach(student => {
const option = document.createElement('option');
option.value = student.name;
option.textContent = student.name;
studentSelect.appendChild(option);
});
});

// ✅ 點選搜尋按鈕
document.getElementById('searchBtn').addEventListener('click', function () {
const studentname = studentSelect.value;
if (! studentname) {
alert('請選取學生');
return;
}

// 彙總統計數據
fetch('sumdataforchart.php', {
method: 'POST',
headers: {
'Content-Type': 'application/json'
},
body: JSON.stringify(
{name: studentname}
)
}).then(res => res.json()).then(data => {
if (!data || Object.keys(data).length === 0 || data.error) {
alert('查無該學生的統計資料');
return;
}
// console.log('真正的資料:',  data);

classhours.innerHTML = `${
parseFloat(data.class_hours).toFixed(2)
} 小時`;
classEl.innerHTML = `${
parseFloat(data.attended_hours).toFixed(2)
} 小時`;
days.innerHTML = `${
data.days
} 天`;

const attendanceratenum = parseInt((parseFloat(data.attended_hours) / parseFloat(data.class_hours)) * 100);
attendancerate.innerHTML = `${attendanceratenum}%`;

const lateratecal = (parseFloat(data.late_hours) / parseFloat(data.class_hours)) * 100;
laterate.innerHTML = `${
lateratecal.toFixed(2)
}%`;

const leave_earlyratecal = (parseFloat(data.leave_early_hours) / parseFloat(data.class_hours)) * 100;
leave_earlyrate.innerHTML = `${
leave_earlyratecal.toFixed(2)
}%`;

const inschoolavragecal = parseFloat(parseInt(data.raw_hours) / parseInt(data.days));
inschoolavrage.innerHTML = `${
inschoolavragecal.toFixed(2)
} 小時`;

});

// 圖表資料
fetch('sumclassdata.php', {
method: 'POST',
headers: {
'Content-Type': 'application/json'
},
body: JSON.stringify(
{name: studentname}
)
}).then(res => res.json()).then(data => {
console.log("資料內容：", data);
updateChart(data);
}).catch(err => {
console.error('取得圖表資料錯誤:', err);
});
});
});
	</script>



{% endblock %}
